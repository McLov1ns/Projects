import { useEffect, useRef, useState } from "react";
import axios from "axios";
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';


function PollutionMap() {
    const mapRef = useRef(null); // –•—Ä–∞–Ω–∏–º –∫–∞—Ä—Ç—É
    const overlayRef = useRef(null); // –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π overlay
    const [timeIndex, setTimeIndex] = useState(0);
    const [levelIndex, setLevelIndex] = useState(0);
    const [currentTime, setCurrentTime] = useState("");
    const [maxTimeIndex, setMaxTimeIndex] = useState(220);  // –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—Ä–µ–º–µ–Ω–∏
    
    // –û–¥–∏–Ω —Ä–∞–∑ —Å–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
    useEffect(() => {
        if (mapRef.current) return;

        const map = L.map("map").setView([53.13, 107.61], 5);
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
            attribution: "¬© OpenStreetMap contributors"
        }).addTo(map);

        mapRef.current = map;
    }, []);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    useEffect(() => {
        if (!mapRef.current) return;
    
        const controller = new AbortController(); //—Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ç–º–µ–Ω—ã
        const imageUrl = `http://127.0.0.1:8000/pollution/image?time_index=${timeIndex}&level_index=${levelIndex}`;
    
        axios.get('http://127.0.0.1:8000/pollution/bounds', { signal: controller.signal })
            .then(response => {
                const { lat_min, lat_max, lon_min, lon_max } = response.data;
                const bounds = [[lat_min, lon_min], [lat_max, lon_max]];

                const preloadImage = new Image();
                preloadImage.src = imageUrl;

                preloadImage.onload = () => {
                    if (overlayRef.current) {
                        mapRef.current.removeLayer(overlayRef.current);
                    }

                    const overlay = L.imageOverlay(imageUrl, bounds, { opacity: 0.6 });
                    overlay.addTo(mapRef.current);
                    overlayRef.current = overlay;
                };
            })
            .catch((err) => {
                if (axios.isCancel(err)) {
                    console.log("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω");
                } else {
                    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", err);
                }
            });
    
        return () => {
            controller.abort(); // üí£ –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ useEffect
        };
    }, [timeIndex, levelIndex]);  

    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—Ä–µ–º–µ–Ω–∏
    useEffect(() => {
        const fetchTime = async () => {
            try {
                const response = await axios.get(`http://127.0.0.1:8000/pollution/time?time_index=${timeIndex}`);
                setCurrentTime(response.data.time);  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç–µ–π—Ç
                setMaxTimeIndex(response.data.max_time_index);  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—Ä–µ–º–µ–Ω–∏
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:", error);
            }
        };

        fetchTime();
    }, [timeIndex]);

    return (
        <div>
            <div>
                <label>–í—Ä–µ–º—è: {currentTime}</label>
                <input
                    type="range"
                    value={timeIndex}
                    onChange={(e) => setTimeIndex(Number(e.target.value))}
                    min="0"
                    max={maxTimeIndex}  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—Ä–µ–º–µ–Ω–∏
                />
            </div>
            <div>
                <label>–í–µ—â–µ—Å—Ç–≤–æ: {levelIndex}</label>
                <input
                    type="range"
                    value={levelIndex}
                    onChange={(e) => setLevelIndex(Number(e.target.value))}
                    min="0"
                    max="9"
                />
            </div>
            <div id="map" style={{ height: "80vh", width: "100%" }}></div>
        </div>
    );
}

export default PollutionMap;
